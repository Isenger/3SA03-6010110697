{"ast":null,"code":"var _jsxFileName = \"G:\\\\React\\\\card-game\\\\3SA03-6010110697\\\\src\\\\WordCard.js\";\nimport React, { Component } from 'react';\nimport CharacterCard from \"./CharacterCard\";\nimport _ from 'lodash';\nconst word = ['eat', 'glad', 'hello', 'studio', 'ability', 'computer'];\n\nconst prepareStateFromWord = given_word => {\n  let word = given_word.toUpperCase();\n\n  let chars = _.shuffle(Array.from(word));\n\n  return {\n    word,\n    chars,\n    attempt: 1,\n    guess: [],\n    completed: false\n  };\n};\n\nexport default class WordCard extends Component {\n  constructor(props) {\n    super(props);\n\n    this.activationHandler = c => {\n      let guess = [...this.state.guess, c.toUpperCase()];\n\n      if (guess.length == 1) {\n        document.getElementById('your-answer').innerHTML = \"Your Answer : \".concat(c.toUpperCase());\n      } else document.getElementById('your-answer').innerHTML += c.toUpperCase();\n\n      this.setState({\n        guess\n      });\n\n      if (guess.length == this.state.chars.length) {\n        console.log('Mistake Word: ' + guess.join('').toString());\n        console.log('Correct Word: ' + this.state.chars.join('').toString());\n\n        if (guess.join('').toString() == this.state.chars.join('').toString()) {\n          this.setState({\n            guess: [],\n            complete: true\n          });\n          document.getElementById('result').innerHTML = \"Congratulations! Or Succees\";\n          document.getElementById('newgame').style.display = \"inline-block\";\n          document.getElementById('answer').style.display = \"none\";\n        } else {\n          this.setState({\n            guess: [],\n            attempt: this.state.attempt + 1\n          });\n          document.getElementById('result').innerHTML = \"Attempt Or Try Again: \".concat(this.state.attempt, \" \"); //document.getElementById('wordenter').innerHTML = `You click is Wrong Word: ${guess.join('').toString()} `\n        }\n\n        if (this.state.attempt == 3) {\n          document.getElementById('result').innerHTML = \"Game Over! So RestartGame\"; //document.getElementById('wordenter').innerHTML = `Answer is: ${this.state.chars.join('').toString()}`\n\n          setTimeout(() => window.location.reload(false), 3000);\n        }\n      }\n    };\n\n    this.state = prepareStateFromWord(word);\n  }\n\n  render() {\n    if (this.props.isSurrenderConfirm) {\n      this.props.getAnswer(this.state.chars.join(' -> '));\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, Array.from(this.props.value).map((c, i) => React.createElement(CharacterCard, {\n      value: c,\n      key: i,\n      activationHandler: this.activationHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    })));\n  }\n\n}","map":{"version":3,"sources":["G:\\React\\card-game\\3SA03-6010110697\\src\\WordCard.js"],"names":["React","Component","CharacterCard","_","word","prepareStateFromWord","given_word","toUpperCase","chars","shuffle","Array","from","attempt","guess","completed","WordCard","constructor","props","activationHandler","c","state","length","document","getElementById","innerHTML","setState","console","log","join","toString","complete","style","display","setTimeout","window","location","reload","render","isSurrenderConfirm","getAnswer","value","map","i"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport CharacterCard from \"./CharacterCard\";\nimport _ from 'lodash';\n\nconst word = ['eat' , 'glad' , 'hello' , 'studio' , 'ability' , 'computer' ]; \n\nconst prepareStateFromWord = (given_word) => {\n     let word = given_word.toUpperCase()\n     let chars = _.shuffle(Array.from(word)) \n     return { \n         word, \n         chars, \n         attempt: 1, \n         guess: [], \n         completed: false \n        } \n}\n\nexport default class WordCard extends Component {\n    constructor(props){\n        super(props)\n        this.state = prepareStateFromWord(word)\n    }\n    activationHandler = (c) =>{\n        let guess = [...this.state.guess, c.toUpperCase()]\n        if(guess.length == 1){\n            document.getElementById('your-answer').innerHTML = `Your Answer : ${c.toUpperCase()}` \n        }else\n            document.getElementById('your-answer').innerHTML += c.toUpperCase();\n        this.setState({guess})\n\n        if(guess.length == this.state.chars.length){\n            console.log('Mistake Word: '+guess.join('').toString())\n            console.log('Correct Word: '+this.state.chars.join('').toString())\n            if(guess.join('').toString() == this.state.chars.join('').toString()){\n                this.setState({guess: [], complete: true})\n                document.getElementById('result').innerHTML = `Congratulations! Or Succees`\n                document.getElementById('newgame').style.display = \"inline-block\";\n                document.getElementById('answer').style.display = \"none\";\n                \n            }else{\n                this.setState({guess: [], attempt: this.state.attempt + 1})\n                document.getElementById('result').innerHTML = `Attempt Or Try Again: ${this.state.attempt} `\n                //document.getElementById('wordenter').innerHTML = `You click is Wrong Word: ${guess.join('').toString()} `\n            }\n            if(this.state.attempt == 3){\n                document.getElementById('result').innerHTML = `Game Over! So RestartGame`\n                //document.getElementById('wordenter').innerHTML = `Answer is: ${this.state.chars.join('').toString()}`\n                setTimeout(() => window.location.reload(false),3000)\n            }\n        }\n    }\n    render() {\n        if(this.props.isSurrenderConfirm){\n            this.props.getAnswer(this.state.chars.join(' -> '))\n        }\n        return (\n            <div>\n                { Array.from(this.props.value).map((c, i) =><CharacterCard value={c} key={i} activationHandler={this.activationHandler}/>) }\n            </div>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}